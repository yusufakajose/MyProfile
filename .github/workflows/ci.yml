name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  backend:
    name: Backend (Maven + Testcontainers)
    runs-on: ubuntu-latest
    timeout-minutes: 30
    defaults:
      run:
        working-directory: backend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'
          cache: 'maven'

      - name: Maven verify (unit + integration + coverage)
        env:
          MAVEN_OPTS: -Xmx2g
        run: ./mvnw -B -P it verify

      - name: Package (skip tests)
        run: ./mvnw -B -DskipTests package

      - name: Upload jar
        uses: actions/upload-artifact@v4
        with:
          name: backend-jar
          path: backend/target/*.jar

  frontend:
    name: Frontend (Node build)
    runs-on: ubuntu-latest
    timeout-minutes: 15
    defaults:
      run:
        working-directory: frontend
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Use Node.js 18
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: 'frontend/package-lock.json'

      - name: Install deps
        run: npm ci

      - name: Build
        env:
          CI: 'true'
          REACT_APP_API_URL: http://localhost:8080
        run: npm run build

      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

  e2e:
    name: E2E (Playwright)
    runs-on: ubuntu-latest
    needs: [backend, frontend]
    timeout-minutes: 20
    services:
      postgres:
        image: postgres:15.8-alpine
        env:
          POSTGRES_USER: linkgrove
          POSTGRES_PASSWORD: linkgrove
          POSTGRES_DB: linkgrove
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U linkgrove -d linkgrove"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      redis:
        image: redis:7.2.4-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3.13.6-management-alpine
        ports:
          - 5672:5672
          - 15672:15672
        options: >-
          --health-cmd "rabbitmq-diagnostics -q check_running"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Download backend jar
        uses: actions/download-artifact@v4
        with:
          name: backend-jar
          path: backend/target

      - name: Download frontend build
        uses: actions/download-artifact@v4
        with:
          name: frontend-build
          path: frontend/build

      - name: Set up Node.js 20 for E2E
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install E2E deps
        working-directory: e2e
        run: npm ci --prefer-offline --no-audit

      - name: Start backend
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/linkgrove
          SPRING_DATASOURCE_USERNAME: linkgrove
          SPRING_DATASOURCE_PASSWORD: linkgrove
          SPRING_DATA_REDIS_HOST: localhost
          SPRING_DATA_REDIS_PORT: 6379
          SPRING_RABBITMQ_HOST: localhost
          SPRING_RABBITMQ_PORT: 5672
          CORS_ALLOWED_ORIGINS: http://localhost:3001
          PUBLIC_BASE_URL: http://localhost:3001
          JWT_SECRET: linkgrove_dev_secret_key_0123456789abcdef0123456789abcdef
        run: |
          nohup java -jar backend/target/*.jar > backend.log 2>&1 & echo $! > backend.pid
          for i in {1..60}; do
            curl -fsS http://localhost:8080/api/auth/health && break || sleep 2;
          done

      - name: Serve frontend build
        run: |
          npm i -g http-server
          nohup http-server frontend/build -p 3001 > frontend.log 2>&1 & echo $! > frontend.pid
          for i in {1..30}; do
            curl -fsS http://localhost:3001 && break || sleep 2;
          done

      - name: Run Playwright tests
        working-directory: e2e
        env:
          E2E_BASE_URL: http://localhost:3001
          E2E_BACKEND_URL: http://localhost:8080
        run: npx playwright install --with-deps && npm test

      - name: Upload Playwright report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-report
          path: e2e/playwright-report

      - name: Upload backend and frontend logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: app-logs
          path: |
            backend.log
            frontend.log

      - name: Stop servers
        if: always()
        run: |
          kill $(cat backend.pid) || true
          kill $(cat frontend.pid) || true


